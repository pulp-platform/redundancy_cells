// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module hmr_registers_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 5
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output hmr_registers_reg_pkg::hmr_registers_reg2hw_t reg2hw, // Write
  input  hmr_registers_reg_pkg::hmr_registers_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import hmr_registers_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic avail_config_independent_qs;
  logic avail_config_independent_re;
  logic avail_config_dual_qs;
  logic avail_config_dual_re;
  logic avail_config_triple_qs;
  logic avail_config_triple_re;
  logic [11:0] cores_en_qs;
  logic cores_en_re;
  logic [5:0] dmr_enable_qs;
  logic [5:0] dmr_enable_wd;
  logic dmr_enable_we;
  logic dmr_enable_re;
  logic [3:0] tmr_enable_qs;
  logic [3:0] tmr_enable_wd;
  logic tmr_enable_we;
  logic tmr_enable_re;
  logic tmr_config_delay_resynch_qs;
  logic tmr_config_delay_resynch_wd;
  logic tmr_config_delay_resynch_we;
  logic tmr_config_delay_resynch_re;
  logic tmr_config_setback_qs;
  logic tmr_config_setback_wd;
  logic tmr_config_setback_we;
  logic tmr_config_setback_re;
  logic tmr_config_reload_setback_qs;
  logic tmr_config_reload_setback_wd;
  logic tmr_config_reload_setback_we;
  logic tmr_config_reload_setback_re;
  logic tmr_config_force_resynch_qs;
  logic tmr_config_force_resynch_wd;
  logic tmr_config_force_resynch_we;
  logic tmr_config_force_resynch_re;

  // Register instances
  // R[avail_config]: V(True)

  //   F[independent]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_avail_config_independent (
    .re     (avail_config_independent_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.avail_config.independent.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (avail_config_independent_qs)
  );


  //   F[dual]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_avail_config_dual (
    .re     (avail_config_dual_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.avail_config.dual.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (avail_config_dual_qs)
  );


  //   F[triple]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_avail_config_triple (
    .re     (avail_config_triple_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.avail_config.triple.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (avail_config_triple_qs)
  );


  // R[cores_en]: V(True)

  prim_subreg_ext #(
    .DW    (12)
  ) u_cores_en (
    .re     (cores_en_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cores_en.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cores_en_qs)
  );


  // R[dmr_enable]: V(True)

  prim_subreg_ext #(
    .DW    (6)
  ) u_dmr_enable (
    .re     (dmr_enable_re),
    .we     (dmr_enable_we),
    .wd     (dmr_enable_wd),
    .d      (hw2reg.dmr_enable.d),
    .qre    (),
    .qe     (reg2hw.dmr_enable.qe),
    .q      (reg2hw.dmr_enable.q ),
    .qs     (dmr_enable_qs)
  );


  // R[tmr_enable]: V(True)

  prim_subreg_ext #(
    .DW    (4)
  ) u_tmr_enable (
    .re     (tmr_enable_re),
    .we     (tmr_enable_we),
    .wd     (tmr_enable_wd),
    .d      (hw2reg.tmr_enable.d),
    .qre    (),
    .qe     (reg2hw.tmr_enable.qe),
    .q      (reg2hw.tmr_enable.q ),
    .qs     (tmr_enable_qs)
  );


  // R[tmr_config]: V(True)

  //   F[delay_resynch]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_tmr_config_delay_resynch (
    .re     (tmr_config_delay_resynch_re),
    .we     (tmr_config_delay_resynch_we),
    .wd     (tmr_config_delay_resynch_wd),
    .d      (hw2reg.tmr_config.delay_resynch.d),
    .qre    (),
    .qe     (reg2hw.tmr_config.delay_resynch.qe),
    .q      (reg2hw.tmr_config.delay_resynch.q ),
    .qs     (tmr_config_delay_resynch_qs)
  );


  //   F[setback]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_tmr_config_setback (
    .re     (tmr_config_setback_re),
    .we     (tmr_config_setback_we),
    .wd     (tmr_config_setback_wd),
    .d      (hw2reg.tmr_config.setback.d),
    .qre    (),
    .qe     (reg2hw.tmr_config.setback.qe),
    .q      (reg2hw.tmr_config.setback.q ),
    .qs     (tmr_config_setback_qs)
  );


  //   F[reload_setback]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_tmr_config_reload_setback (
    .re     (tmr_config_reload_setback_re),
    .we     (tmr_config_reload_setback_we),
    .wd     (tmr_config_reload_setback_wd),
    .d      (hw2reg.tmr_config.reload_setback.d),
    .qre    (),
    .qe     (reg2hw.tmr_config.reload_setback.qe),
    .q      (reg2hw.tmr_config.reload_setback.q ),
    .qs     (tmr_config_reload_setback_qs)
  );


  //   F[force_resynch]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_tmr_config_force_resynch (
    .re     (tmr_config_force_resynch_re),
    .we     (tmr_config_force_resynch_we),
    .wd     (tmr_config_force_resynch_wd),
    .d      (hw2reg.tmr_config.force_resynch.d),
    .qre    (),
    .qe     (reg2hw.tmr_config.force_resynch.qe),
    .q      (reg2hw.tmr_config.force_resynch.q ),
    .qs     (tmr_config_force_resynch_qs)
  );




  logic [4:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == HMR_REGISTERS_AVAIL_CONFIG_OFFSET);
    addr_hit[1] = (reg_addr == HMR_REGISTERS_CORES_EN_OFFSET);
    addr_hit[2] = (reg_addr == HMR_REGISTERS_DMR_ENABLE_OFFSET);
    addr_hit[3] = (reg_addr == HMR_REGISTERS_TMR_ENABLE_OFFSET);
    addr_hit[4] = (reg_addr == HMR_REGISTERS_TMR_CONFIG_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(HMR_REGISTERS_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(HMR_REGISTERS_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(HMR_REGISTERS_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(HMR_REGISTERS_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(HMR_REGISTERS_PERMIT[4] & ~reg_be)))));
  end

  assign avail_config_independent_re = addr_hit[0] & reg_re & !reg_error;

  assign avail_config_dual_re = addr_hit[0] & reg_re & !reg_error;

  assign avail_config_triple_re = addr_hit[0] & reg_re & !reg_error;

  assign cores_en_re = addr_hit[1] & reg_re & !reg_error;

  assign dmr_enable_we = addr_hit[2] & reg_we & !reg_error;
  assign dmr_enable_wd = reg_wdata[5:0];
  assign dmr_enable_re = addr_hit[2] & reg_re & !reg_error;

  assign tmr_enable_we = addr_hit[3] & reg_we & !reg_error;
  assign tmr_enable_wd = reg_wdata[3:0];
  assign tmr_enable_re = addr_hit[3] & reg_re & !reg_error;

  assign tmr_config_delay_resynch_we = addr_hit[4] & reg_we & !reg_error;
  assign tmr_config_delay_resynch_wd = reg_wdata[0];
  assign tmr_config_delay_resynch_re = addr_hit[4] & reg_re & !reg_error;

  assign tmr_config_setback_we = addr_hit[4] & reg_we & !reg_error;
  assign tmr_config_setback_wd = reg_wdata[1];
  assign tmr_config_setback_re = addr_hit[4] & reg_re & !reg_error;

  assign tmr_config_reload_setback_we = addr_hit[4] & reg_we & !reg_error;
  assign tmr_config_reload_setback_wd = reg_wdata[2];
  assign tmr_config_reload_setback_re = addr_hit[4] & reg_re & !reg_error;

  assign tmr_config_force_resynch_we = addr_hit[4] & reg_we & !reg_error;
  assign tmr_config_force_resynch_wd = reg_wdata[3];
  assign tmr_config_force_resynch_re = addr_hit[4] & reg_re & !reg_error;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = avail_config_independent_qs;
        reg_rdata_next[1] = avail_config_dual_qs;
        reg_rdata_next[2] = avail_config_triple_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[11:0] = cores_en_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[5:0] = dmr_enable_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[3:0] = tmr_enable_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = tmr_config_delay_resynch_qs;
        reg_rdata_next[1] = tmr_config_setback_qs;
        reg_rdata_next[2] = tmr_config_reload_setback_qs;
        reg_rdata_next[3] = tmr_config_force_resynch_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module hmr_registers_reg_top_intf
#(
  parameter int AW = 5,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output hmr_registers_reg_pkg::hmr_registers_reg2hw_t reg2hw, // Write
  input  hmr_registers_reg_pkg::hmr_registers_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  hmr_registers_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


