// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package ecc_manager_8_reg_pkg;

  // Param list
  parameter int NumBanks = 8;

  // Address widths within the block
  parameter int BlockAw = 8;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } ecc_manager_8_reg2hw_mismatch_count_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } ecc_manager_8_reg2hw_scrub_interval_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } ecc_manager_8_reg2hw_scrub_fix_count_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } ecc_manager_8_reg2hw_scrub_uncorrectable_count_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } ecc_manager_8_reg2hw_write_mask_data_n_mreg_t;

  typedef struct packed {
    logic [6:0]  q;
  } ecc_manager_8_reg2hw_write_mask_ecc_n_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } ecc_manager_8_hw2reg_mismatch_count_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } ecc_manager_8_hw2reg_scrub_fix_count_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } ecc_manager_8_hw2reg_scrub_uncorrectable_count_mreg_t;

  // Register -> HW type
  typedef struct packed {
    ecc_manager_8_reg2hw_mismatch_count_mreg_t [7:0] mismatch_count; // [1111:856]
    ecc_manager_8_reg2hw_scrub_interval_reg_t scrub_interval; // [855:824]
    ecc_manager_8_reg2hw_scrub_fix_count_mreg_t [7:0] scrub_fix_count; // [823:568]
    ecc_manager_8_reg2hw_scrub_uncorrectable_count_mreg_t [7:0] scrub_uncorrectable_count; // [567:312]
    ecc_manager_8_reg2hw_write_mask_data_n_mreg_t [7:0] write_mask_data_n; // [311:56]
    ecc_manager_8_reg2hw_write_mask_ecc_n_mreg_t [7:0] write_mask_ecc_n; // [55:0]
  } ecc_manager_8_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    ecc_manager_8_hw2reg_mismatch_count_mreg_t [7:0] mismatch_count; // [791:528]
    ecc_manager_8_hw2reg_scrub_fix_count_mreg_t [7:0] scrub_fix_count; // [527:264]
    ecc_manager_8_hw2reg_scrub_uncorrectable_count_mreg_t [7:0] scrub_uncorrectable_count; // [263:0]
  } ecc_manager_8_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_MISMATCH_COUNT_0_OFFSET = 8'h 0;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_MISMATCH_COUNT_1_OFFSET = 8'h 4;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_MISMATCH_COUNT_2_OFFSET = 8'h 8;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_MISMATCH_COUNT_3_OFFSET = 8'h c;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_MISMATCH_COUNT_4_OFFSET = 8'h 10;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_MISMATCH_COUNT_5_OFFSET = 8'h 14;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_MISMATCH_COUNT_6_OFFSET = 8'h 18;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_MISMATCH_COUNT_7_OFFSET = 8'h 1c;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_INTERVAL_OFFSET = 8'h 20;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_FIX_COUNT_0_OFFSET = 8'h 24;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_FIX_COUNT_1_OFFSET = 8'h 28;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_FIX_COUNT_2_OFFSET = 8'h 2c;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_FIX_COUNT_3_OFFSET = 8'h 30;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_FIX_COUNT_4_OFFSET = 8'h 34;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_FIX_COUNT_5_OFFSET = 8'h 38;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_FIX_COUNT_6_OFFSET = 8'h 3c;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_FIX_COUNT_7_OFFSET = 8'h 40;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_0_OFFSET = 8'h 44;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_1_OFFSET = 8'h 48;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_2_OFFSET = 8'h 4c;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_3_OFFSET = 8'h 50;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_4_OFFSET = 8'h 54;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_5_OFFSET = 8'h 58;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_6_OFFSET = 8'h 5c;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_7_OFFSET = 8'h 60;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_WRITE_MASK_DATA_N_0_OFFSET = 8'h 64;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_WRITE_MASK_DATA_N_1_OFFSET = 8'h 68;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_WRITE_MASK_DATA_N_2_OFFSET = 8'h 6c;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_WRITE_MASK_DATA_N_3_OFFSET = 8'h 70;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_WRITE_MASK_DATA_N_4_OFFSET = 8'h 74;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_WRITE_MASK_DATA_N_5_OFFSET = 8'h 78;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_WRITE_MASK_DATA_N_6_OFFSET = 8'h 7c;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_WRITE_MASK_DATA_N_7_OFFSET = 8'h 80;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_WRITE_MASK_ECC_N_0_OFFSET = 8'h 84;
  parameter logic [BlockAw-1:0] ECC_MANAGER_8_WRITE_MASK_ECC_N_1_OFFSET = 8'h 88;

  // Register index
  typedef enum int {
    ECC_MANAGER_8_MISMATCH_COUNT_0,
    ECC_MANAGER_8_MISMATCH_COUNT_1,
    ECC_MANAGER_8_MISMATCH_COUNT_2,
    ECC_MANAGER_8_MISMATCH_COUNT_3,
    ECC_MANAGER_8_MISMATCH_COUNT_4,
    ECC_MANAGER_8_MISMATCH_COUNT_5,
    ECC_MANAGER_8_MISMATCH_COUNT_6,
    ECC_MANAGER_8_MISMATCH_COUNT_7,
    ECC_MANAGER_8_SCRUB_INTERVAL,
    ECC_MANAGER_8_SCRUB_FIX_COUNT_0,
    ECC_MANAGER_8_SCRUB_FIX_COUNT_1,
    ECC_MANAGER_8_SCRUB_FIX_COUNT_2,
    ECC_MANAGER_8_SCRUB_FIX_COUNT_3,
    ECC_MANAGER_8_SCRUB_FIX_COUNT_4,
    ECC_MANAGER_8_SCRUB_FIX_COUNT_5,
    ECC_MANAGER_8_SCRUB_FIX_COUNT_6,
    ECC_MANAGER_8_SCRUB_FIX_COUNT_7,
    ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_0,
    ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_1,
    ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_2,
    ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_3,
    ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_4,
    ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_5,
    ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_6,
    ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_7,
    ECC_MANAGER_8_WRITE_MASK_DATA_N_0,
    ECC_MANAGER_8_WRITE_MASK_DATA_N_1,
    ECC_MANAGER_8_WRITE_MASK_DATA_N_2,
    ECC_MANAGER_8_WRITE_MASK_DATA_N_3,
    ECC_MANAGER_8_WRITE_MASK_DATA_N_4,
    ECC_MANAGER_8_WRITE_MASK_DATA_N_5,
    ECC_MANAGER_8_WRITE_MASK_DATA_N_6,
    ECC_MANAGER_8_WRITE_MASK_DATA_N_7,
    ECC_MANAGER_8_WRITE_MASK_ECC_N_0,
    ECC_MANAGER_8_WRITE_MASK_ECC_N_1
  } ecc_manager_8_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] ECC_MANAGER_8_PERMIT [35] = '{
    4'b 1111, // index[ 0] ECC_MANAGER_8_MISMATCH_COUNT_0
    4'b 1111, // index[ 1] ECC_MANAGER_8_MISMATCH_COUNT_1
    4'b 1111, // index[ 2] ECC_MANAGER_8_MISMATCH_COUNT_2
    4'b 1111, // index[ 3] ECC_MANAGER_8_MISMATCH_COUNT_3
    4'b 1111, // index[ 4] ECC_MANAGER_8_MISMATCH_COUNT_4
    4'b 1111, // index[ 5] ECC_MANAGER_8_MISMATCH_COUNT_5
    4'b 1111, // index[ 6] ECC_MANAGER_8_MISMATCH_COUNT_6
    4'b 1111, // index[ 7] ECC_MANAGER_8_MISMATCH_COUNT_7
    4'b 1111, // index[ 8] ECC_MANAGER_8_SCRUB_INTERVAL
    4'b 1111, // index[ 9] ECC_MANAGER_8_SCRUB_FIX_COUNT_0
    4'b 1111, // index[10] ECC_MANAGER_8_SCRUB_FIX_COUNT_1
    4'b 1111, // index[11] ECC_MANAGER_8_SCRUB_FIX_COUNT_2
    4'b 1111, // index[12] ECC_MANAGER_8_SCRUB_FIX_COUNT_3
    4'b 1111, // index[13] ECC_MANAGER_8_SCRUB_FIX_COUNT_4
    4'b 1111, // index[14] ECC_MANAGER_8_SCRUB_FIX_COUNT_5
    4'b 1111, // index[15] ECC_MANAGER_8_SCRUB_FIX_COUNT_6
    4'b 1111, // index[16] ECC_MANAGER_8_SCRUB_FIX_COUNT_7
    4'b 1111, // index[17] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_0
    4'b 1111, // index[18] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_1
    4'b 1111, // index[19] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_2
    4'b 1111, // index[20] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_3
    4'b 1111, // index[21] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_4
    4'b 1111, // index[22] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_5
    4'b 1111, // index[23] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_6
    4'b 1111, // index[24] ECC_MANAGER_8_SCRUB_UNCORRECTABLE_COUNT_7
    4'b 1111, // index[25] ECC_MANAGER_8_WRITE_MASK_DATA_N_0
    4'b 1111, // index[26] ECC_MANAGER_8_WRITE_MASK_DATA_N_1
    4'b 1111, // index[27] ECC_MANAGER_8_WRITE_MASK_DATA_N_2
    4'b 1111, // index[28] ECC_MANAGER_8_WRITE_MASK_DATA_N_3
    4'b 1111, // index[29] ECC_MANAGER_8_WRITE_MASK_DATA_N_4
    4'b 1111, // index[30] ECC_MANAGER_8_WRITE_MASK_DATA_N_5
    4'b 1111, // index[31] ECC_MANAGER_8_WRITE_MASK_DATA_N_6
    4'b 1111, // index[32] ECC_MANAGER_8_WRITE_MASK_DATA_N_7
    4'b 1111, // index[33] ECC_MANAGER_8_WRITE_MASK_ECC_N_0
    4'b 1111  // index[34] ECC_MANAGER_8_WRITE_MASK_ECC_N_1
  };

endpackage

