From 2efe5a9d73fc7469dbb07b4b892e2bb94b604089 Mon Sep 17 00:00:00 2001
From: Michael Rogenmoser <michael@rogenmoser.us>
Date: Fri, 7 Jul 2023 14:47:16 +0200
Subject: [PATCH] Add Corrector to generation script and update testbench

---
 secded_gen.py | 60 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 60 insertions(+)

diff --git a/secded_gen.py b/secded_gen.py
index 4a32f6433..24056ce3d 100755
--- a/secded_gen.py
+++ b/secded_gen.py
@@ -180,6 +180,47 @@ def print_dec(n, k, m, codes, codetype, print_type="logic"):
         outstr += "  {}".format(preamble) + "err_o[1] = ~single_error & (|syndrome_o);\n"
     return outstr
 
+def print_cor(n, k, m, codes, codetype, print_type="logic"):
+
+    preamble = PRINT_OPTIONS[print_type]
+
+    outstr = ""
+    if codetype == "hsiao":
+        outstr += "  {}logic single_error;\n".format(
+            preamble if print_type == "function" else "")
+
+    outstr += "\n"
+    outstr += "  {}// Syndrome calculation\n".format(
+        preamble if print_type == "function" else "")
+    format_str = "  {}".format(preamble) + "syndrome_o[{}] = ^(d_i & " \
+        + str(n) + "'h{:0" + str((n + 3) // 4) + "X});\n"
+
+    # Print syndrome computation
+    for j, mask in enumerate(calc_bitmasks(k, m, codes, True)):
+        outstr += format_str.format(j, mask)
+    outstr += "\n"
+    outstr += "  {}// Corrected output calculation\n".format(
+        preamble if print_type == "function" else "")
+    for i in range(k):
+        outstr += "  {}".format(preamble) + "d_o[%d] = (syndrome_o == %d'h%x) ^ d_i[%d];\n" % (
+            i, m, calc_syndrome(codes[i]), i)
+    for i in range(n-k):
+        outstr += "  {}".format(preamble) + "d_o[%d] = (syndrome_o == %d'h%x) ^ d_i[%d];\n" % (
+            i+k, m, 2**i, i+k)
+    outstr += "\n"
+    outstr += "  {}// err_o calc. bit0: single error, bit1: double error\n".format(
+        preamble if print_type == "function" else "")
+    # The Hsiao and Hamming syndromes are interpreted slightly differently.
+    if codetype == "hamming":
+        outstr += "  {}".format(preamble) + "err_o[0] = syndrome_o[%d];\n" % (m - 1)
+        outstr += "  {}".format(preamble) + "err_o[1] = |syndrome_o[%d:0] & ~syndrome_o[%d];\n" % (
+            m - 2, m - 1)
+    else:
+        outstr += "  {}".format(preamble) + "single_error = ^syndrome_o;\n"
+        outstr += "  {}".format(preamble) + "err_o[0] = single_error;\n"
+        outstr += "  {}".format(preamble) + "err_o[1] = ~single_error & (|syndrome_o);\n"
+    return outstr
+
 
 # return whether an integer is a power of 2
 def is_pow2(n):
@@ -440,6 +481,25 @@ endmodule : {}_dec
            (m - 1), dec_out, module_name)
         f.write(outstr)
 
+        cor_out = print_cor(n, k, m, codes, codetype)
+
+    with open(outdir + "/" + module_name + "_cor.sv", "w") as f:
+        outstr = '''{}// SECDED Corrector generated by
+// util/design/secded_gen.py -m {} -k {} -s {} -c {}
+
+module {}_cor (
+  input        [{}:0] d_i,
+  output logic [{}:0] d_o,
+  output logic [{}:0] syndrome_o,
+  output logic [1:0] err_o
+);
+
+{}
+endmodule : {}_cor
+'''.format(COPYRIGHT, m, k, s, codetype, module_name, (n - 1), (n - 1),
+           (m - 1), cor_out, module_name)
+        f.write(outstr)
+
 
 def write_fpv_files(n, k, m, codes, suffix, outdir):
     module_name = "prim_secded%s_%d_%d" % (suffix, n, k)
-- 
2.31.1

