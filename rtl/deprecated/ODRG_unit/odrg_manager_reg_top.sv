// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module odrg_manager_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 5
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output odrg_manager_reg_pkg::odrg_manager_reg2hw_t reg2hw, // Write
  input  odrg_manager_reg_pkg::odrg_manager_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import odrg_manager_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] sp_store_qs;
  logic [31:0] sp_store_wd;
  logic sp_store_we;
  logic mode_mode_qs;
  logic mode_mode_wd;
  logic mode_mode_we;
  logic mode_delay_resynch_qs;
  logic mode_delay_resynch_wd;
  logic mode_delay_resynch_we;
  logic mode_setback_qs;
  logic mode_setback_wd;
  logic mode_setback_we;
  logic mode_reload_setback_qs;
  logic mode_reload_setback_wd;
  logic mode_reload_setback_we;
  logic mode_force_resynch_qs;
  logic mode_force_resynch_wd;
  logic mode_force_resynch_we;
  logic [31:0] mismatches_0_qs;
  logic [31:0] mismatches_0_wd;
  logic mismatches_0_we;
  logic [31:0] mismatches_1_qs;
  logic [31:0] mismatches_1_wd;
  logic mismatches_1_we;
  logic [31:0] mismatches_2_qs;
  logic [31:0] mismatches_2_wd;
  logic mismatches_2_we;

  // Register instances
  // R[sp_store]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_sp_store (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (sp_store_we),
    .wd     (sp_store_wd),

    // from internal hardware
    .de     (hw2reg.sp_store.de),
    .d      (hw2reg.sp_store.d ),

    // to internal hardware
    .qe     (reg2hw.sp_store.qe),
    .q      (reg2hw.sp_store.q ),

    // to register interface (read)
    .qs     (sp_store_qs)
  );


  // R[mode]: V(False)

  //   F[mode]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mode_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mode_mode_we),
    .wd     (mode_mode_wd),

    // from internal hardware
    .de     (hw2reg.mode.mode.de),
    .d      (hw2reg.mode.mode.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mode.mode.q ),

    // to register interface (read)
    .qs     (mode_mode_qs)
  );


  //   F[delay_resynch]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mode_delay_resynch (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mode_delay_resynch_we),
    .wd     (mode_delay_resynch_wd),

    // from internal hardware
    .de     (hw2reg.mode.delay_resynch.de),
    .d      (hw2reg.mode.delay_resynch.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mode.delay_resynch.q ),

    // to register interface (read)
    .qs     (mode_delay_resynch_qs)
  );


  //   F[setback]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mode_setback (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mode_setback_we),
    .wd     (mode_setback_wd),

    // from internal hardware
    .de     (hw2reg.mode.setback.de),
    .d      (hw2reg.mode.setback.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mode.setback.q ),

    // to register interface (read)
    .qs     (mode_setback_qs)
  );


  //   F[reload_setback]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mode_reload_setback (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mode_reload_setback_we),
    .wd     (mode_reload_setback_wd),

    // from internal hardware
    .de     (hw2reg.mode.reload_setback.de),
    .d      (hw2reg.mode.reload_setback.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mode.reload_setback.q ),

    // to register interface (read)
    .qs     (mode_reload_setback_qs)
  );


  //   F[force_resynch]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mode_force_resynch (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mode_force_resynch_we),
    .wd     (mode_force_resynch_wd),

    // from internal hardware
    .de     (hw2reg.mode.force_resynch.de),
    .d      (hw2reg.mode.force_resynch.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mode.force_resynch.q ),

    // to register interface (read)
    .qs     (mode_force_resynch_qs)
  );


  // R[mismatches_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W0C"),
    .RESVAL  (32'h0)
  ) u_mismatches_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mismatches_0_we),
    .wd     (mismatches_0_wd),

    // from internal hardware
    .de     (hw2reg.mismatches_0.de),
    .d      (hw2reg.mismatches_0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mismatches_0.q ),

    // to register interface (read)
    .qs     (mismatches_0_qs)
  );


  // R[mismatches_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W0C"),
    .RESVAL  (32'h0)
  ) u_mismatches_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mismatches_1_we),
    .wd     (mismatches_1_wd),

    // from internal hardware
    .de     (hw2reg.mismatches_1.de),
    .d      (hw2reg.mismatches_1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mismatches_1.q ),

    // to register interface (read)
    .qs     (mismatches_1_qs)
  );


  // R[mismatches_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W0C"),
    .RESVAL  (32'h0)
  ) u_mismatches_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mismatches_2_we),
    .wd     (mismatches_2_wd),

    // from internal hardware
    .de     (hw2reg.mismatches_2.de),
    .d      (hw2reg.mismatches_2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mismatches_2.q ),

    // to register interface (read)
    .qs     (mismatches_2_qs)
  );




  logic [4:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == ODRG_MANAGER_SP_STORE_OFFSET);
    addr_hit[1] = (reg_addr == ODRG_MANAGER_MODE_OFFSET);
    addr_hit[2] = (reg_addr == ODRG_MANAGER_MISMATCHES_0_OFFSET);
    addr_hit[3] = (reg_addr == ODRG_MANAGER_MISMATCHES_1_OFFSET);
    addr_hit[4] = (reg_addr == ODRG_MANAGER_MISMATCHES_2_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(ODRG_MANAGER_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(ODRG_MANAGER_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(ODRG_MANAGER_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(ODRG_MANAGER_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(ODRG_MANAGER_PERMIT[4] & ~reg_be)))));
  end

  assign sp_store_we = addr_hit[0] & reg_we & !reg_error;
  assign sp_store_wd = reg_wdata[31:0];

  assign mode_mode_we = addr_hit[1] & reg_we & !reg_error;
  assign mode_mode_wd = reg_wdata[0];

  assign mode_delay_resynch_we = addr_hit[1] & reg_we & !reg_error;
  assign mode_delay_resynch_wd = reg_wdata[1];

  assign mode_setback_we = addr_hit[1] & reg_we & !reg_error;
  assign mode_setback_wd = reg_wdata[2];

  assign mode_reload_setback_we = addr_hit[1] & reg_we & !reg_error;
  assign mode_reload_setback_wd = reg_wdata[3];

  assign mode_force_resynch_we = addr_hit[1] & reg_we & !reg_error;
  assign mode_force_resynch_wd = reg_wdata[4];

  assign mismatches_0_we = addr_hit[2] & reg_we & !reg_error;
  assign mismatches_0_wd = reg_wdata[31:0];

  assign mismatches_1_we = addr_hit[3] & reg_we & !reg_error;
  assign mismatches_1_wd = reg_wdata[31:0];

  assign mismatches_2_we = addr_hit[4] & reg_we & !reg_error;
  assign mismatches_2_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = sp_store_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = mode_mode_qs;
        reg_rdata_next[1] = mode_delay_resynch_qs;
        reg_rdata_next[2] = mode_setback_qs;
        reg_rdata_next[3] = mode_reload_setback_qs;
        reg_rdata_next[4] = mode_force_resynch_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = mismatches_0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = mismatches_1_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = mismatches_2_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module odrg_manager_reg_top_intf
#(
  parameter int AW = 5,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output odrg_manager_reg_pkg::odrg_manager_reg2hw_t reg2hw, // Write
  input  odrg_manager_reg_pkg::odrg_manager_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  odrg_manager_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


