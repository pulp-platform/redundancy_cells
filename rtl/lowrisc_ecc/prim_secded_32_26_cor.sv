// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// SECDED Corrector generated by
// util/design/secded_gen.py -m 6 -k 26 -s 1592631616 -c hsiao

module prim_secded_32_26_cor (
  input        [31:0] d_i,
  output logic [31:0] d_o,
  output logic [5:0] syndrome_o,
  output logic [1:0] err_o
);

  logic single_error;

  // Syndrome calculation
  assign syndrome_o[0] = ^(d_i & 32'h05F003FF);
  assign syndrome_o[1] = ^(d_i & 32'h0AF0FC0F);
  assign syndrome_o[2] = ^(d_i & 32'h13771C71);
  assign syndrome_o[3] = ^(d_i & 32'h23BB6592);
  assign syndrome_o[4] = ^(d_i & 32'h43DDAAA4);
  assign syndrome_o[5] = ^(d_i & 32'h83EED348);

  // Corrected output calculation
  assign d_o[0] = (syndrome_o == 6'h7) ^ d_i[0];
  assign d_o[1] = (syndrome_o == 6'hb) ^ d_i[1];
  assign d_o[2] = (syndrome_o == 6'h13) ^ d_i[2];
  assign d_o[3] = (syndrome_o == 6'h23) ^ d_i[3];
  assign d_o[4] = (syndrome_o == 6'hd) ^ d_i[4];
  assign d_o[5] = (syndrome_o == 6'h15) ^ d_i[5];
  assign d_o[6] = (syndrome_o == 6'h25) ^ d_i[6];
  assign d_o[7] = (syndrome_o == 6'h19) ^ d_i[7];
  assign d_o[8] = (syndrome_o == 6'h29) ^ d_i[8];
  assign d_o[9] = (syndrome_o == 6'h31) ^ d_i[9];
  assign d_o[10] = (syndrome_o == 6'he) ^ d_i[10];
  assign d_o[11] = (syndrome_o == 6'h16) ^ d_i[11];
  assign d_o[12] = (syndrome_o == 6'h26) ^ d_i[12];
  assign d_o[13] = (syndrome_o == 6'h1a) ^ d_i[13];
  assign d_o[14] = (syndrome_o == 6'h2a) ^ d_i[14];
  assign d_o[15] = (syndrome_o == 6'h32) ^ d_i[15];
  assign d_o[16] = (syndrome_o == 6'h1c) ^ d_i[16];
  assign d_o[17] = (syndrome_o == 6'h2c) ^ d_i[17];
  assign d_o[18] = (syndrome_o == 6'h34) ^ d_i[18];
  assign d_o[19] = (syndrome_o == 6'h38) ^ d_i[19];
  assign d_o[20] = (syndrome_o == 6'h1f) ^ d_i[20];
  assign d_o[21] = (syndrome_o == 6'h2f) ^ d_i[21];
  assign d_o[22] = (syndrome_o == 6'h37) ^ d_i[22];
  assign d_o[23] = (syndrome_o == 6'h3b) ^ d_i[23];
  assign d_o[24] = (syndrome_o == 6'h3d) ^ d_i[24];
  assign d_o[25] = (syndrome_o == 6'h3e) ^ d_i[25];
  assign d_o[26] = (syndrome_o == 6'h1) ^ d_i[26];
  assign d_o[27] = (syndrome_o == 6'h2) ^ d_i[27];
  assign d_o[28] = (syndrome_o == 6'h4) ^ d_i[28];
  assign d_o[29] = (syndrome_o == 6'h8) ^ d_i[29];
  assign d_o[30] = (syndrome_o == 6'h10) ^ d_i[30];
  assign d_o[31] = (syndrome_o == 6'h20) ^ d_i[31];

  // err_o calc. bit0: single error, bit1: double error
  assign single_error = ^syndrome_o;
  assign err_o[0] = single_error;
  assign err_o[1] = ~single_error & (|syndrome_o);

endmodule : prim_secded_32_26_cor
